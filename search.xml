<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[linux内存管理概论（二）]]></title>
      <url>/2018/07/29/memory-management/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这周终于抽时间把内存知识重新梳理一下，记录如下。本文是一篇概论性文章，主要目的在于帮助形成正确的结构以及层次，不会有非常具体的讨论，但每个算法具体的一些细节和比较会在引用中给出。</p>
<p>我对内存的认识，现在主要几部分，第一部分 计算机组成原理中虚拟内存、swap、内存映射。这一步是内存的基础，其核心所涉及的cache理念、中间层，也是我们的系统设计最宝贵的财富，值得我们细细品味，灵活运用；第二部分是linux内存管理。大型项目，例如STL库，Python等语言设计为了实现高效率，都会在系统之上再设计一层内存管理，但我认为linux的内存管理应当是最普适，给我们帮助最多的，也是我们接触最多的；第三部分是：内存的使用以及度量。包括一些系统api对内存如何影响和使用，linux内存的查看，这些是实践中我们经常遇到的问题，有助于解决一些线上问题。</p>
<h2 id="主要概念、算法"><a href="#主要概念、算法" class="headerlink" title="主要概念、算法"></a>主要概念、算法</h2><p>我们知道linux是由内核态和用户态之分的，两种模式的存在，天然的分离了用户和系统的一些操作，保证了系统的安全可靠。所以从内存管理里来说，内核态和用户态的内存管理是不同的。linux内存管理主要有：用户态的内存管理，主要包括glibc的ptmalloc、google的tcmalloc等；linux内核态的小对象的slab分配器算法；linux伙伴算法。其三者的关系见下图：<img src="memory_model.jpg" alt=""></p>
<h3 id="用户态的分配算法"><a href="#用户态的分配算法" class="headerlink" title="用户态的分配算法"></a>用户态的分配算法</h3><p>这里我们大概讲一下glibc的ptmalloc实现，该实现是系统默认的实现，是大家打交道比较多的。其涉及到的主要概念是chunk， bins。</p>
<h4 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h4><p>在Glibc的堆内存管理中，chunk是堆内存分配的基本的单位，它表示堆内存中连续的内存单元。比方说我们通过malloc(8)申请一个连续的8字节内存，则Glibc会分配我们一个大小为8(chunk size + previous size)+8(payload)大小的chunk，这也就解释了free(void*)一块内存，只需要给出一个地址，因为可以根据结构找到大小以及相邻信息，从而完成释放的过程。，其结构如下：<img src="chunk.png" alt=""></p>
<h4 id="bins"><a href="#bins" class="headerlink" title="bins"></a>bins</h4><p>将相似大小的chunk用双向链表链接起来，这样的一个链表就被叫做bin。ptmalloc一共维护了128个bin。bins的目的就在于分配的时候能快速索引，根据规则找到合适的chunk。同时为了快速分配、回收小内存，专门设置了Fast Bins，（小内存Cache很关键，因为是高频的使用和释放的）；为了整理分配过内存，避免过多小内存碎片，设置了unsorted bin，专门接受要释放的合适大小的chunk，整理后再放回普通bin中。</p>
<p>分配算法的简单流程可以看作是先计算chunk大小，根据规则寻找bin,如果不符合向系统申请，释放简单来看就是一个寻找bin的反过程。实际上chunk的组织方式，分配、释放都是包含着具体的trick和一些设计哲学的，关于具体的实现和较为详细流程可以参照这几篇文章:<a href="https://segmentfault.com/a/1190000013059779" target="_blank" rel="external">关于Ptmalloc的一点总结</a>， <a href="http://blog.binpang.me/2017/09/22/ptmalloc%E5%A0%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/" target="_blank" rel="external">ptmalloc堆内存管理</a>。如果感兴趣，也可以去读一下源码，<br><a href="https://paper.seebug.org/papers/Archive/refs/heap/glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.pdf" target="_blank" rel="external">Ptmalloc2 源代码分析.华庭</a></p>
<p>ptmalloc虽然取得了效率与空间的平衡，但是在空间利用率、效率、多线程表现等方面还是可以更好的。下面几篇文章介绍了ptmalloc、tcmalloc、jemalloc，并进行了一些比较。<a href="https://blog.csdn.net/huangynn/article/details/50700093" target="_blank" rel="external">几种malloc实现原理</a>, <a href="https://www.jianshu.com/p/91d2956f22c1" target="_blank" rel="external">ptmalloc/tcmalloc/jemalloc内存分配策略</a>。</p>
<h3 id="内核态的slab分配器"><a href="#内核态的slab分配器" class="headerlink" title="内核态的slab分配器"></a>内核态的slab分配器</h3><p>在linux内核中， 像用户程序一样，内核也需要动态分配内存，由于内核无法借助标准的C库，linux内核实现的是slab分配器。相比于用户态的内存分配，内核的内存分配，变量种类和结构相对已知，所以可以在chunk粒度基础上做一些优化。slab 是 slab 分配器进行操作的最小分配单位，一个slab来自物理内存管理器的一到多个物理页，该slab被划分成一个个对象，这些对象是从特定缓存中进行分配和释放的基本元素。多个slab被连接为一个队列，通常为了使用方便，需要三个队列，即使用完的队列、部分使用的队列，未使用的队列。三个队列就构成了一个对象池，而内核就是维护了一个对象池（kmem_cache）的链表。基本结构见下图：<a href="slab.gif"></a></p>
<p>与传统的内存管理模式相比， slab 缓存分配器提供了很多优点。首先，内核通常依赖于对小对象的分配，它们会在系统生命周期内进行无数次分配。slab 缓存分配器通过对类似大小的对象进行缓存而提供这种功能，从而避免了常见的碎片问题。slab 分配器还支持通用对象的初始化，从而避免了为同一目而对一个对象重复进行初始化。最后，slab 分配器还可以支持硬件缓存对齐和着色，这允许不同缓存中的对象占用相同的缓存行，从而提高缓存的利用率并获得更好的性能。</p>
<p>下面文章给了一些更详细的描述，<a href="https://www.ibm.com/developerworks/cn/linux/l-linux-slab-allocator/index.html" target="_blank" rel="external">Linux slab 分配器剖析</a>, <a href="https://blog.csdn.net/goodluckwhh/article/details/10026311" target="_blank" rel="external">slab分配器</a></p>
<h3 id="伙伴算法"><a href="#伙伴算法" class="headerlink" title="伙伴算法"></a>伙伴算法</h3><p>无论是用户态分配算法还是内核态分配算法，应该是在虚拟地址空间进行分配，实际上真正分配物理内存是通过缺页中断引起。随着用户程序的执行和结束，就需要不断地为其分配和释放物理页面。内核应该为分配一组连续的页面而建立一种稳定、高效的分配策略。但是，频繁地请求和释放不同大小的一组连续页面，必然导致在已分配的内存块中分散许多小块的空闲页面，即外碎片，由此带来的问题是，即使这些小块的空闲页面加起来足以满足所请求的页面，但是要分配一个大块的连续页面可能就根本无法满足。为此，Linux采用著名的伙伴（Buddy）算法来解决外碎片问题。</p>
<p>伙伴算法比较简单，即将内存按2的幂进行划分，相当于分离出若干个块大小一致的空闲链表，搜索该链表并给出同需求最佳匹配的大小。至于具体介绍可以看一下<a href="https://en.wikipedia.org/wiki/Buddy_memory_allocation" target="_blank" rel="external">好友内存分配</a>, 至于简单版实现，可以参照云风，<a href="https://blog.codingnow.com/2011/12/buddy_memory_allocation.html" target="_blank" rel="external">伙伴内存分配器</a></p>
]]></content>
      
        <categories>
            
            <category> 操作系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> 内存 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github + hexo 搭建自己的博客]]></title>
      <url>/2017/07/03/%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天开始，学校生活结束，正式开始工作。为了全面提高自己的综合素质，决定搭建一个博客，记录一下自己的心路历程，正好原来无聊申请的域名也可以用一下。博客框架采用的是静态博客框架，在Windows64平台下具体采用的是的<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Page</a> + <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>，原因主要有下面几点：</p>
<ol>
<li>经济方面，GitHub Page可以提供免费、快捷的服务，不用租vps，且这种静态网站可以满足自己的需求。</li>
<li>可拓展性方面，相关插件众多，可以自己定制化一些功能，比如谷歌统计、评论、站内搜索等功能。</li>
<li>实用性方面，博客采用纯文本格式<a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">Markdown</a>，书写方便。</li>
<li>平台方面，jekyll依基于Ruby实现，安装Jekyll需要搭建Ruby环境，在Windows搭建Ruby环境并不是被推荐的，而 Hexo基于NodeJs实现，在Windows上安装NodeJs开发环境简单。</li>
</ol>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>这里只是简单记录了几个重要步骤，github page搭建、Hexo搭建、部署。具体的细节可以参照引用。</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>无论是windows还是linux，都需要下面的环境，只需要下载安装自己对应的版本。</p>
<ol>
<li><a href="https://git-scm.com/" target="_blank" rel="external">Git</a> 环境</li>
<li><a href="https://nodejs.org/en/download/" target="_blank" rel="external">nodejs</a>环境</li>
</ol>
<h3 id="GitHub-page搭建"><a href="#GitHub-page搭建" class="headerlink" title="GitHub page搭建"></a>GitHub page搭建</h3><ol>
<li>申请注册一个GitHub账号，假设名称是xxx。</li>
<li>创建一个xxx.github.io的public仓库，这是特殊的命名约定。xxx表示你的用户名，具体可以去<a href="https://pages.github.com/" target="_blank" rel="external">这里了解</a>。</li>
</ol>
<h3 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h3><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<h4 id="安装Hexo配置包"><a href="#安装Hexo配置包" class="headerlink" title="安装Hexo配置包"></a>安装Hexo配置包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<h4 id="创建Hexo"><a href="#创建Hexo" class="headerlink" title="创建Hexo"></a>创建Hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog  </div><div class="line">$ cd blog  </div><div class="line">$ npm install</div><div class="line">$ hexo g # 或者hexo generate</div><div class="line">$ hexo s # 或者hexo server，可以在http:/localhost:4000/ 查看到生成网页</div></pre></td></tr></table></figure>
<h3 id="Hexo-部署"><a href="#Hexo-部署" class="headerlink" title="Hexo 部署"></a>Hexo 部署</h3><p>将网页部署到github，在blog目录下的配置文件_config.yml中作如下修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/xxx/xxx.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>然后在命令行中执行命令，部署页面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<h3 id="Hexo优化"><a href="#Hexo优化" class="headerlink" title="Hexo优化"></a>Hexo优化</h3><h4 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h4><p>Hexo有很多主题，可以根据自己喜好选择自己的主题。本博客采用的是<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">next</a>,具体替换方式可以查看文档说明，easy。</p>
<h4 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h4><p>主要是针对主题一些小细节进行优化，比如文字，排版什么的，可以自行google修改。</p>
<h4 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h4><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">next</a>中介绍了很多第三方服务，可以根据需求自行添加。</p>
<h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><h4 id="域名绑定到github"><a href="#域名绑定到github" class="headerlink" title="域名绑定到github"></a>域名绑定到github</h4><p>域名绑定，我实在万网上购买域名，可以直接添加域名解析。进入域名界面，添加解析到github的两条A类记录，可以直接复制。如下图：<img src="/images/ym.png" alt=""><br>设置好以后，dns将你的域名解析给github，下面让github可以找到你的GitHub page。</p>
<h4 id="Github解析"><a href="#Github解析" class="headerlink" title="Github解析"></a>Github解析</h4><p>在Github的xxx.github.io项目,进入【Settings】标签页,在【Custom domain】功能中,将刚刚申请的域名写进去。保存以后，GitHub下会发现多出一个CNAME文件，至此大功告成（最好将CNAME再保存在blog下的source下）。dns域名解析，有10min延迟，所以需要等待10min。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><a href="https://www.jianshu.com/p/f4cc5866946b" target="_blank" rel="external">手把手教从零开始在GitHub上使用Hexo搭建博客教程</a></li>
<li><a href="https://hexo.io/zh-tw/docs/commands.html" target="_blank" rel="external">Hexo 指令介绍</a></li>
<li><a href="http://www.cnblogs.com/seayxu/p/5548243.html" target="_blank" rel="external">Hexo 配置文件说明</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 捣鼓 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GitHub page </tag>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
